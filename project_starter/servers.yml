Description: >
  HaiNTV1 / Udacity 2023

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  
  InstanceAMI:
    Type: String
    Default: ami-005de95e8ff495156
    Description: AMI use for instances

  InstanceType:
    Description: The EC2 instance type for the launch configuration (Webapp)
    Default: t3.small
    Type: String

  S3Bucket:
    Description: The S3 path includes src.zip
    Type: String
    Default: s3://s3-project-2/src.zip

Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our Load Balancer
      VpcId:
        Fn::ImportValue:
          !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:  Allow http and ssh local connections
      VpcId:
        Fn::ImportValue:
          !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # change to your IP later
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub '${EnvironmentName}-VPCID'

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup

  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref ELBListener
        Priority: 1
  
  WebAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref InstanceAMI
      IamInstanceProfile: !Ref ProfileWithRolesForOurApps
      SecurityGroups:
      - !Ref WebAppSecurityGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
          DeleteOnTermination: true
          VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://s3-project-2/src.zip ./
          unzip -o src.zip
          systemctl restart apache2.service

  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref WebAppLaunchConfiguration
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub '${EnvironmentName}-PRI-NETS'
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: 2
      Tags:
      - Key: Name
        Value: !Sub '${EnvironmentName} WebSite AutoScalingGroup'
        PropagateAtLaunch: True
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: True

  S3ReadOnlyEC2s:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'

  RolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:Put*
              - s3:Get*
              - s3:List*
            Resource:
              - arn:aws:s3:::s3-project-2/
              - arn:aws:s3:::s3-project-2/*
      Roles:
        - Ref: S3ReadOnlyEC2s

  ProfileWithRolesForOurApps:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - Ref: S3ReadOnlyEC2s

Outputs:

  WebsiteURL:
    Description: DNS Name or Pulic URL of the website throught the Load Balancer
    Value: !Sub http://${WebAppLoadBalancer.DNSName}
    Export:
      Name: !Sub '${EnvironmentName}-DNS-NAME'

  LoadBalancerSecurityGroup:
    Description: LoadBalancer Security Group
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub '${EnvironmentName}-ELB-SG'
  
  WebAppSecurityGroup:
    Description: WebApp Security Group
    Value: !Ref WebAppSecurityGroup
    Export:
      Name: !Sub '${EnvironmentName}-WEBAPP-SG'
